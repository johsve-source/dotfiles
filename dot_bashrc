# All the default Omarchy aliases and functions
# (don't mess with these directly, just overwrite them here!)
source ~/.local/share/omarchy/default/bash/rc

# =============================================================================
# EXPORTS & ENVIRONMENT
# =============================================================================
eval "$(starship init bash)"
eval "$(zoxide init bash)"
export VISUAL=nvim
export EDITOR="$VISUAL"
export TERMINAL="ghostty"
export SHELL="/bin/bash"

# Deno environment
. "/home/johan/.deno/env"

# Nix profile
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
  . "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

# =============================================================================
# ALIASES
# =============================================================================

alias chezadd=chezmoi_readd
alias hidebt=hide_bt
alias nup=upgrade nvim-nix
alias tup=upgrade tmux
alias nv=nvim

# =============================================================================
# FUNCTIONS
# =============================================================================

tm() {
  if [ -n "$TMUX" ]; then
    current=$(tmux display-message -p '#S' 2>/dev/null)
    [ -n "$current" ] && tmux kill-session -t "$current"
    exec tmux new -s "$current"
  else
    tmux attach || tmux new -s main
  fi
}

upgrade() {
  if [ -z "$1" ]; then
    echo "Usage: upgrade <package>"
    return 1
  fi

  if nix profile upgrade "$1"; then
    notify-send "Nix Upgrade" "Successfully upgraded $1"
  else
    notify-send "Nix Upgrade" "Failed to upgrade $1"
  fi
}

# Start and hide Bluetooth
hide_bt() {
  bluetoothctl power on
  bluetoothctl pairable off
  bluetoothctl discoverable off
}

# Chezmoi configuration management
chezmoi_readd() {
  local base_targets=(
    "$HOME/.bash_logout"
    "$HOME/.bash_profile"
    "$HOME/.bashrc"
    "$HOME/.nanorc"
    "$HOME/workspace"
  )

  # Add base targets
  for t in "${base_targets[@]}"; do
    [ -e "$t" ] && echo "HOME: Adding $t" && chezmoi add "$t"
  done

  # Add config directories (excluding specific ones)
  find "$HOME/.config" \
    -mindepth 1 -maxdepth 1 \
    ! -name 'chezmoi' \
    ! -name 'chromium' \
    ! -name 'gh' \
    ! -name 'vesktop' \
    ! -name 'github-copilot' \
    ! -name 'Signal' \
    ! -name 'omarchy' \
    ! -name '.git' \
    ! -name '*~' \
    ! -name '*.lock' |
    while read -r entry; do
      echo "CONFIG: Adding $entry" && chezmoi add "$entry"
    done

  # Optional Git operations
  read -p "Add/Commit/Push chezmoi repository? [y/N] " answer
  case "$answer" in
  [Yy])
    git -C "$HOME/.local/share/chezmoi" add .
    git -C "$HOME/.local/share/chezmoi" commit -m "update"
    git -C "$HOME/.local/share/chezmoi" push
    ;;
  *)
    echo "Skipping add, commit and push to GitHub"
    ;;
  esac
}

# =============================================================================
# INTERACTIVE SHELL SETUP
# =============================================================================

if command -v tmux &>/dev/null; then
  [ -z "$TMUX" ] && exec tmux
fi

# SSH agent setup
if [[ $- == *i* ]]; then
  if ! ssh-add -l >/dev/null 2>&1; then
    eval "$(ssh-agent -s)" >/dev/null 2>&1

    for key in "$HOME/.ssh"/*; do
      [[ -f "$key" ]] || continue

      # Skip public keys and certificates
      case "$key" in
      *.pub | *-cert.pub) continue ;;
      esac

      # Add private keys
      if grep -Iq "PRIVATE KEY" "$key" 2>/dev/null ||
        grep -Iq "BEGIN SSH2 ENCRYPTED PRIVATE KEY" "$key" 2>/dev/null; then
        if ! ssh-add "$key" >/dev/null 2>&1; then
          echo "ssh-add failed or required passphrase for: $key"
        fi
      fi
    done
  fi
fi
